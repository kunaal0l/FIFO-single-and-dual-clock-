`timescale 1ns / 1ps

module fifo_dual_clk_tb;

    // Inputs
    reg clk_r;
    reg clk_w;
    reg rst;
    reg wr_en;
    reg rd_en;
    reg [7:0] buf_in;

    // Outputs
    wire [7:0] buf_out;
    wire buf_empty;
    wire buf_full;
    wire [7:0] fifo_counter;

    // Instantiate the FIFO
    fifo_dual_clk uut (
        .clk_r(clk_r),
        .clk_w(clk_w),
        .rst(rst),
        .wr_en(wr_en),
        .rd_en(rd_en),
        .buf_in(buf_in),
        .buf_out(buf_out),
        .buf_empty(buf_empty),
        .buf_full(buf_full),
        .fifo_counter(fifo_counter)
    );

    // Clock generation
    initial begin
        clk_r = 0;
        clk_w = 0;
        forever begin
            #4 clk_r = ~clk_r; // read clock ~8 ns period
        end
    end

    initial begin
        forever begin
            #5 clk_w = ~clk_w; // write clock ~10 ns period
        end
    end

    // Test procedure
    initial begin
        // Initial reset
        rst = 1;
        wr_en = 0;
        rd_en = 0;
        buf_in = 8'd0;
        #20;
        rst = 0;

        // Write 10 bytes
        repeat (10) begin
            @(posedge clk_w);
            wr_en = 1;
            buf_in = buf_in + 8'd1;
        end

        wr_en = 0;

        // Wait some cycles
        #50;

        // Read 10 bytes
        repeat (10) begin
            @(posedge clk_r);
            rd_en = 1;
        end

        rd_en = 0;

        // Final wait
        #100;
        $finish;
    end

    // Monitor
    initial begin
        $monitor("Time=%0t | wr_en=%b rd_en=%b buf_in=%d buf_out=%d full=%b empty=%b count=%d",
                  $time, wr_en, rd_en, buf_in, buf_out, buf_full, buf_empty, fifo_counter);
    end

endmodule
